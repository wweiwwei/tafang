import { BattleEvent } from "../../Event/BattleEvent";
import { BattleBattleStageContext } from "../../Processor/BattleBattleStageContext";
import { BattleSkillBaseDuration } from "../../Skill/Duration/BattleSkillBaseDuration";
import { BattleBattleStageObject } from "../BattleStage/BattleBattleStageObject";

export abstract class BattleBaseState {
    constructor(public target: BattleBattleStageObject, public ctx: BattleBattleStageContext, public nodeId: number) {
        this.stateType = this.nodeConfig.getProperties("stateType");
        this.tag = this.nodeConfig.getProperties("tag").split("|");
        this.maxLayer = Math.round(this.ctx.skill.evalValue(this.nodeConfig.getProperties("maxLayer"), "final"));
        this.interval = Math.round(this.ctx.skill.evalValue(this.nodeConfig.getProperties("interval"), "final"));
        this.valueCache = Math.ceil(this.ctx.skill.evalValue(this.nodeConfig.getProperties("skillValue"), "final"));
        this.dynamic = this.nodeConfig.getProperties("dynamic");
        this.dispelable = this.nodeConfig.getProperties("dispelable");
        this.init();
    }

    abstract init(): void;

    /** 状态类型 */
    stateType: string;
    /** 状态作用类型 */
    abstract stateEffectType: "abnormal" | "shield" | "dot" | "special";
    /** 最大层数 */
    maxLayer: number;
    /** 层数 */
    layer: number = 1;
    /** 叠加模式 */
    abstract addMode: "layer" | "independent" | "last";
    /** 间隔 */
    interval: number;
    /** 伤害tag */
    tag: string[] = [];
    /** 技能值缓存 */
    valueCache: number;
    /** 动态 */
    dynamic: boolean;
    /** 可驱散 */
    dispelable: boolean;

    /** 持续特效 */
    get durationEffect() {
        return this.nodeConfig.getProperties("effect");
    }

    get nodeConfig() {
        const graph = this.ctx.skill.graph;
        return graph.getNodeById(this.nodeId);
    }

    get nodeKey(): string {
        return `${this.ctx.skill.id}_${this.nodeId}`;
    }

    finishFunc: Function;
    private duration: BattleSkillBaseDuration;

    onAdd(finishFunc: Function): void {
        this.finishFunc = finishFunc;
        const duration = this.nodeConfig.getInput("duration");
        this.duration = BattleSkillBaseDuration.createDuration(this.ctx, duration, finishFunc);
        this.start();
    }

    abstract start(): void;

    addLayer() {
        // 重置持续时间
        this.duration.remove();
        const duration = this.nodeConfig.getInput("duration");
        this.duration = BattleSkillBaseDuration.createDuration(this.ctx, duration, this.finishFunc);
        // 层数+1
        this.layer += 1;
        if (this.layer > this.maxLayer) this.layer = this.maxLayer;
    }

    handleEvent(e: BattleEvent) {}

    onRemove() {
        this.duration.remove();
        this.end();
    }

    abstract end(): void;
}
