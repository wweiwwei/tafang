// @ts-nocheck
// Generated from java-escape by ANTLR 4.11.1
// jshint ignore: start
import antlr4 = require('./antlr4');


const serializedATN = [4,0,48,335,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,1,0,1,0,1,1,1,1,1,2,1,
2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,
7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,
1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,
21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,
1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,31,1,
31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,35,1,35,
1,36,1,36,1,36,1,36,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,
39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
1,41,1,41,1,41,1,42,1,42,1,42,5,42,242,8,42,10,42,12,42,245,9,42,1,43,1,
43,1,44,1,44,1,44,4,44,252,8,44,11,44,12,44,253,1,44,3,44,257,8,44,1,44,
1,44,1,44,1,44,3,44,263,8,44,1,45,1,45,1,45,5,45,268,8,45,10,45,12,45,271,
9,45,3,45,273,8,45,1,46,1,46,3,46,277,8,46,1,46,1,46,1,47,1,47,1,47,5,47,
284,8,47,10,47,12,47,287,9,47,1,47,1,47,1,48,1,48,1,48,3,48,294,8,48,1,49,
1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,51,4,51,305,8,51,11,51,12,51,306,1,
51,1,51,1,52,1,52,1,52,1,52,5,52,315,8,52,10,52,12,52,318,9,52,1,52,1,52,
1,52,1,52,1,52,1,53,1,53,1,53,1,53,5,53,329,8,53,10,53,12,53,332,9,53,1,
53,1,53,1,316,0,54,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,0,89,44,91,0,93,0,95,45,
97,0,99,0,101,0,103,46,105,47,107,48,1,0,10,1,0,48,57,2,0,65,90,97,122,1,
0,49,57,2,0,69,69,101,101,2,0,43,43,45,45,2,0,34,34,92,92,8,0,34,34,47,47,
92,92,98,98,102,102,110,110,114,114,116,116,3,0,48,57,65,70,97,102,3,0,9,
10,13,13,32,32,2,0,10,10,13,13,343,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,
63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,
0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,
1,0,0,0,0,89,1,0,0,0,0,95,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,
0,0,1,109,1,0,0,0,3,111,1,0,0,0,5,113,1,0,0,0,7,115,1,0,0,0,9,120,1,0,0,
0,11,127,1,0,0,0,13,129,1,0,0,0,15,131,1,0,0,0,17,133,1,0,0,0,19,136,1,0,
0,0,21,138,1,0,0,0,23,140,1,0,0,0,25,142,1,0,0,0,27,144,1,0,0,0,29,147,1,
0,0,0,31,149,1,0,0,0,33,151,1,0,0,0,35,153,1,0,0,0,37,155,1,0,0,0,39,157,
1,0,0,0,41,160,1,0,0,0,43,162,1,0,0,0,45,165,1,0,0,0,47,168,1,0,0,0,49,171,
1,0,0,0,51,175,1,0,0,0,53,179,1,0,0,0,55,181,1,0,0,0,57,183,1,0,0,0,59,185,
1,0,0,0,61,187,1,0,0,0,63,190,1,0,0,0,65,193,1,0,0,0,67,196,1,0,0,0,69,202,
1,0,0,0,71,204,1,0,0,0,73,206,1,0,0,0,75,210,1,0,0,0,77,212,1,0,0,0,79,217,
1,0,0,0,81,223,1,0,0,0,83,228,1,0,0,0,85,238,1,0,0,0,87,246,1,0,0,0,89,262,
1,0,0,0,91,272,1,0,0,0,93,274,1,0,0,0,95,280,1,0,0,0,97,290,1,0,0,0,99,295,
1,0,0,0,101,301,1,0,0,0,103,304,1,0,0,0,105,310,1,0,0,0,107,324,1,0,0,0,
109,110,5,59,0,0,110,2,1,0,0,0,111,112,5,123,0,0,112,4,1,0,0,0,113,114,5,
125,0,0,114,6,1,0,0,0,115,116,5,101,0,0,116,117,5,108,0,0,117,118,5,115,
0,0,118,119,5,101,0,0,119,8,1,0,0,0,120,121,5,114,0,0,121,122,5,101,0,0,
122,123,5,116,0,0,123,124,5,117,0,0,124,125,5,114,0,0,125,126,5,110,0,0,
126,10,1,0,0,0,127,128,5,40,0,0,128,12,1,0,0,0,129,130,5,44,0,0,130,14,1,
0,0,0,131,132,5,41,0,0,132,16,1,0,0,0,133,134,5,61,0,0,134,135,5,62,0,0,
135,18,1,0,0,0,136,137,5,91,0,0,137,20,1,0,0,0,138,139,5,93,0,0,139,22,1,
0,0,0,140,141,5,46,0,0,141,24,1,0,0,0,142,143,5,45,0,0,143,26,1,0,0,0,144,
145,5,42,0,0,145,146,5,42,0,0,146,28,1,0,0,0,147,148,5,42,0,0,148,30,1,0,
0,0,149,150,5,47,0,0,150,32,1,0,0,0,151,152,5,37,0,0,152,34,1,0,0,0,153,
154,5,43,0,0,154,36,1,0,0,0,155,156,5,62,0,0,156,38,1,0,0,0,157,158,5,62,
0,0,158,159,5,61,0,0,159,40,1,0,0,0,160,161,5,60,0,0,161,42,1,0,0,0,162,
163,5,60,0,0,163,164,5,61,0,0,164,44,1,0,0,0,165,166,5,61,0,0,166,167,5,
61,0,0,167,46,1,0,0,0,168,169,5,33,0,0,169,170,5,61,0,0,170,48,1,0,0,0,171,
172,5,61,0,0,172,173,5,61,0,0,173,174,5,61,0,0,174,50,1,0,0,0,175,176,5,
33,0,0,176,177,5,61,0,0,177,178,5,61,0,0,178,52,1,0,0,0,179,180,5,38,0,0,
180,54,1,0,0,0,181,182,5,94,0,0,182,56,1,0,0,0,183,184,5,124,0,0,184,58,
1,0,0,0,185,186,5,33,0,0,186,60,1,0,0,0,187,188,5,38,0,0,188,189,5,38,0,
0,189,62,1,0,0,0,190,191,5,124,0,0,191,192,5,124,0,0,192,64,1,0,0,0,193,
194,5,105,0,0,194,195,5,102,0,0,195,66,1,0,0,0,196,197,5,119,0,0,197,198,
5,104,0,0,198,199,5,105,0,0,199,200,5,108,0,0,200,201,5,101,0,0,201,68,1,
0,0,0,202,203,5,63,0,0,203,70,1,0,0,0,204,205,5,58,0,0,205,72,1,0,0,0,206,
207,5,108,0,0,207,208,5,101,0,0,208,209,5,116,0,0,209,74,1,0,0,0,210,211,
5,61,0,0,211,76,1,0,0,0,212,213,5,116,0,0,213,214,5,114,0,0,214,215,5,117,
0,0,215,216,5,101,0,0,216,78,1,0,0,0,217,218,5,102,0,0,218,219,5,97,0,0,
219,220,5,108,0,0,220,221,5,115,0,0,221,222,5,101,0,0,222,80,1,0,0,0,223,
224,5,110,0,0,224,225,5,117,0,0,225,226,5,108,0,0,226,227,5,108,0,0,227,
82,1,0,0,0,228,229,5,117,0,0,229,230,5,110,0,0,230,231,5,100,0,0,231,232,
5,101,0,0,232,233,5,102,0,0,233,234,5,105,0,0,234,235,5,110,0,0,235,236,
5,101,0,0,236,237,5,100,0,0,237,84,1,0,0,0,238,243,3,87,43,0,239,242,3,87,
43,0,240,242,7,0,0,0,241,239,1,0,0,0,241,240,1,0,0,0,242,245,1,0,0,0,243,
241,1,0,0,0,243,244,1,0,0,0,244,86,1,0,0,0,245,243,1,0,0,0,246,247,7,1,0,
0,247,88,1,0,0,0,248,249,3,91,45,0,249,251,5,46,0,0,250,252,7,0,0,0,251,
250,1,0,0,0,252,253,1,0,0,0,253,251,1,0,0,0,253,254,1,0,0,0,254,256,1,0,
0,0,255,257,3,93,46,0,256,255,1,0,0,0,256,257,1,0,0,0,257,263,1,0,0,0,258,
259,3,91,45,0,259,260,3,93,46,0,260,263,1,0,0,0,261,263,3,91,45,0,262,248,
1,0,0,0,262,258,1,0,0,0,262,261,1,0,0,0,263,90,1,0,0,0,264,273,5,48,0,0,
265,269,7,2,0,0,266,268,7,0,0,0,267,266,1,0,0,0,268,271,1,0,0,0,269,267,
1,0,0,0,269,270,1,0,0,0,270,273,1,0,0,0,271,269,1,0,0,0,272,264,1,0,0,0,
272,265,1,0,0,0,273,92,1,0,0,0,274,276,7,3,0,0,275,277,7,4,0,0,276,275,1,
0,0,0,276,277,1,0,0,0,277,278,1,0,0,0,278,279,3,91,45,0,279,94,1,0,0,0,280,
285,5,34,0,0,281,284,3,97,48,0,282,284,8,5,0,0,283,281,1,0,0,0,283,282,1,
0,0,0,284,287,1,0,0,0,285,283,1,0,0,0,285,286,1,0,0,0,286,288,1,0,0,0,287,
285,1,0,0,0,288,289,5,34,0,0,289,96,1,0,0,0,290,293,5,92,0,0,291,294,7,6,
0,0,292,294,3,99,49,0,293,291,1,0,0,0,293,292,1,0,0,0,294,98,1,0,0,0,295,
296,5,117,0,0,296,297,3,101,50,0,297,298,3,101,50,0,298,299,3,101,50,0,299,
300,3,101,50,0,300,100,1,0,0,0,301,302,7,7,0,0,302,102,1,0,0,0,303,305,7,
8,0,0,304,303,1,0,0,0,305,306,1,0,0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,
308,1,0,0,0,308,309,6,51,0,0,309,104,1,0,0,0,310,311,5,47,0,0,311,312,5,
42,0,0,312,316,1,0,0,0,313,315,9,0,0,0,314,313,1,0,0,0,315,318,1,0,0,0,316,
317,1,0,0,0,316,314,1,0,0,0,317,319,1,0,0,0,318,316,1,0,0,0,319,320,5,42,
0,0,320,321,5,47,0,0,321,322,1,0,0,0,322,323,6,52,0,0,323,106,1,0,0,0,324,
325,5,47,0,0,325,326,5,47,0,0,326,330,1,0,0,0,327,329,8,9,0,0,328,327,1,
0,0,0,329,332,1,0,0,0,330,328,1,0,0,0,330,331,1,0,0,0,331,333,1,0,0,0,332,
330,1,0,0,0,333,334,6,53,0,0,334,108,1,0,0,0,15,0,241,243,253,256,262,269,
272,276,283,285,293,306,316,330,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class LogicBindDSLLexer extends antlr4.Lexer {

    static grammarFileName = "LogicBindDSL.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "';'", "'{'", "'}'", "'else'", "'return'", 
                         "'('", "','", "')'", "'=>'", "'['", "']'", "'.'", 
                         "'-'", "'**'", "'*'", "'/'", "'%'", "'+'", "'>'", 
                         "'>='", "'<'", "'<='", "'=='", "'!='", "'==='", 
                         "'!=='", "'&'", "'^'", "'|'", "'!'", "'&&'", "'||'", 
                         "'if'", "'while'", "'?'", "':'", "'let'", "'='", 
                         "'true'", "'false'", "'null'", "'undefined'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, "ID", "NUMBER", "STRING", "WS", 
                          "COMMENT", "LINE_COMMENT" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", 
                      "T__13", "T__14", "T__15", "T__16", "T__17", "T__18", 
                      "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
                      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", 
                      "T__31", "T__32", "T__33", "T__34", "T__35", "T__36", 
                      "T__37", "T__38", "T__39", "T__40", "T__41", "ID", 
                      "LETTER", "NUMBER", "INT", "EXP", "STRING", "ESC", 
                      "UNICODE", "HEX", "WS", "COMMENT", "LINE_COMMENT" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

LogicBindDSLLexer.EOF = antlr4.Token.EOF;
LogicBindDSLLexer.T__0 = 1;
LogicBindDSLLexer.T__1 = 2;
LogicBindDSLLexer.T__2 = 3;
LogicBindDSLLexer.T__3 = 4;
LogicBindDSLLexer.T__4 = 5;
LogicBindDSLLexer.T__5 = 6;
LogicBindDSLLexer.T__6 = 7;
LogicBindDSLLexer.T__7 = 8;
LogicBindDSLLexer.T__8 = 9;
LogicBindDSLLexer.T__9 = 10;
LogicBindDSLLexer.T__10 = 11;
LogicBindDSLLexer.T__11 = 12;
LogicBindDSLLexer.T__12 = 13;
LogicBindDSLLexer.T__13 = 14;
LogicBindDSLLexer.T__14 = 15;
LogicBindDSLLexer.T__15 = 16;
LogicBindDSLLexer.T__16 = 17;
LogicBindDSLLexer.T__17 = 18;
LogicBindDSLLexer.T__18 = 19;
LogicBindDSLLexer.T__19 = 20;
LogicBindDSLLexer.T__20 = 21;
LogicBindDSLLexer.T__21 = 22;
LogicBindDSLLexer.T__22 = 23;
LogicBindDSLLexer.T__23 = 24;
LogicBindDSLLexer.T__24 = 25;
LogicBindDSLLexer.T__25 = 26;
LogicBindDSLLexer.T__26 = 27;
LogicBindDSLLexer.T__27 = 28;
LogicBindDSLLexer.T__28 = 29;
LogicBindDSLLexer.T__29 = 30;
LogicBindDSLLexer.T__30 = 31;
LogicBindDSLLexer.T__31 = 32;
LogicBindDSLLexer.T__32 = 33;
LogicBindDSLLexer.T__33 = 34;
LogicBindDSLLexer.T__34 = 35;
LogicBindDSLLexer.T__35 = 36;
LogicBindDSLLexer.T__36 = 37;
LogicBindDSLLexer.T__37 = 38;
LogicBindDSLLexer.T__38 = 39;
LogicBindDSLLexer.T__39 = 40;
LogicBindDSLLexer.T__40 = 41;
LogicBindDSLLexer.T__41 = 42;
LogicBindDSLLexer.ID = 43;
LogicBindDSLLexer.NUMBER = 44;
LogicBindDSLLexer.STRING = 45;
LogicBindDSLLexer.WS = 46;
LogicBindDSLLexer.COMMENT = 47;
LogicBindDSLLexer.LINE_COMMENT = 48;



