import EventBus from "../../framework/event/EventBus";
import AfkData from "../entity/AfkData";
import Item from "../entity/Item";
import MainStage from "../entity/MainStage";
import EventName from "../event/EventName";
import WindowBattleScene from "../module/battle/WindowBattleScene";
import WindowSettlement from "../module/battle/WindowSettlement";

export default class StageModel {
    /** 收集地图产出 */
    async collectMapProduce(mapIndex: number): Promise<Item[]> {
        if (GState.data.stageAfkMapProduce[mapIndex]) {
            return await GApi.stage.collectMapProduce({ mapIndex });
        } else {
            return [];
        }
    }

    /** 收集全部地图产出 */
    collectAllMapProduce(): Promise<Item[]> {
        return GApi.stage.collectAllMapProduce();
    }

    /** 收集挂机宝箱产出 */
    async collectAfkReward2(video: boolean): Promise<{
        reward: Item[];
    }> {
        if (video) await GSDK.showVideo("double_afk_reward");
        if (GServer.apiVersion >= 1) {
            return GApi.stage.collectAfkReward2({ video });
        } else {
            return GApi.stage.collectAfkReward();
        }
    }

    private peaceMode = true;

    isPeaceMode() {
        return this.peaceMode;
    }

    async battleSceneMainLoop() {
        while (true) {
            // this.switchToPeaceMode();
            const isWin = await this._stageWave();
            if (!isWin) continue;
            await this._stageBoss();
        }
    }

    private async _stageWave() {
        const allStage = this.getAllStage();
        const afk = allStage.find((t) => t.mapIndex === this.getStageAfkMap());
        let originStageIndex = afk.stageIndex;
        if (afk.clear) {
            GTip.showTip([GLang.code.ui.stage_all_clear_tip]);
            return;
        }
        const processor = GModel.battle.createStageBattle();
        this.peaceMode = true;
        EventBus.emit(EventName.peaceModeSwitch);
        const isWin = await GWindow.get(WindowBattleScene).battle(processor);
        GApi.stage.reportStageBattleEnd();
        return isWin;
    }

    // switchToPeaceMode() {
    //     // GWindow.close(WindowBattleStageInfo);
    //     this.peaceMode = true;
    //     EventBus.emit(EventName.peaceModeSwitch);
    //     const processor = GModel.battle.createStageBattleNotBoss();
    //     GWindow.get(WindowBattleScene).battle(processor);
    // }

    // async swithToChallenge() {
    //     GTip.showChangeScene();
    //     await GUtils.http.delay(1000);
    //     // GWindow.open(WindowBattleStageInfo);
    //     const isWin = await this._stageBoss();
    //     this.switchToPeaceMode();
    // }
    /** 关卡挑战 */
    private async _stageBoss(): Promise<boolean> {
        GTip.showChangeScene("boss");
        await GUtils.http.delay(1000);
        const allStage = this.getAllStage();
        const afk = allStage.find((t) => t.mapIndex === this.getStageAfkMap());
        let originStageIndex = afk.stageIndex;
        if (afk.clear) {
            GTip.showTip([GLang.code.ui.stage_all_clear_tip]);
            return;
        }
        GWindow.get(WindowBattleScene).clearBattle();
        const processor = GModel.battle.createStageBattleBoss();
        this.peaceMode = false;
        EventBus.emit(EventName.peaceModeSwitch);
        const isWin = await GWindow.get(WindowBattleScene).battle(processor);
        GApi.stage.reportStageBattleEnd();
        GModel.guide.triggerDialogue(8, afk.mapIndex, afk.stageIndex);
        GModel.giftPack.packTrigger(1, [
            afk.mapIndex,
            originStageIndex,
            GModel.stage.getStageByMapIndex(afk.mapIndex).stageIndex,
        ]);
        GSDK.report({
            kind: "mainStage",
            data: {
                mapIndex: afk.mapIndex,
                stageIndex: afk.stageIndex,
            },
        });
        if (isWin) {
            const { reward } = await GApi.stage.challengeStage();
            reward.forEach((t) => {
                GTip.showRewardItem(t);
            });
        }
        GTip.showChangeScene("trans");
        // EventBus.emit(EventName.resetBattle, isWin);
        return isWin;
    }

    /** 挑战关卡 */
    async challengeStage(nextStage: boolean): Promise<void> {
        const allStage = this.getAllStage();
        if (GModel.hero.getFormation().find((t) => t !== -1)) {
            const afk = allStage.find((t) => t.mapIndex === this.getStageAfkMap());
            let originStageIndex = afk.stageIndex;
            if (!afk.clear) {
                let isWin = false;
                if (nextStage) {
                    const tbl = GTable.getList("StageMapTbl").find((t) => t.mapIndex === afk.mapIndex);
                    const stageTbl = GTable.getList("StageTbl").find(
                        (t) =>
                            t.mapIndex === afk.mapIndex &&
                            t.stageIndex[0] <= afk.stageIndex &&
                            t.stageIndex[1] >= afk.stageIndex
                    );
                    const lv = afk.stageIndex + tbl.baseLv + stageTbl.baseLv;
                    isWin = await GWindow.get(WindowBattleScene).nextStage(afk.getWaveId(), lv, -1);
                } else {
                    GWindow.get(WindowBattleScene).clearBattle();
                    const processor = GModel.battle.createStageBattle();
                    isWin = await GWindow.get(WindowBattleScene).battle(processor);
                }
                GApi.stage.reportStageBattleEnd();
                if (isWin) {
                    const { reward, survivor } = await GApi.stage.challengeStage();
                    // if (survivor > 0) {
                    //     GWindow.open(WindowSettlement, {
                    //         isWin,
                    //         reward,
                    //         text: [GLang.code.ui.victory_conclusion, "_rs" + survivor],
                    //     }).then(() => {
                    //         GModel.guide.triggerDialogue(8, afk.mapIndex, afk.stageIndex);
                    //     });
                    // } else {
                    reward.forEach((t) => {
                        GTip.showRewardItem(t);
                    });
                    GModel.guide.triggerDialogue(8, afk.mapIndex, afk.stageIndex);
                    GModel.giftPack.packTrigger(1, [
                        afk.mapIndex,
                        originStageIndex,
                        GModel.stage.getStageByMapIndex(afk.mapIndex).stageIndex,
                    ]);
                    GSDK.report({
                        kind: "mainStage",
                        data: {
                            mapIndex: afk.mapIndex,
                            stageIndex: afk.stageIndex,
                        },
                    });
                }
                // }
                else {
                    // 失败窗口
                    if (!GWindow.isAnyWindowOpening()) GWindow.open(WindowSettlement, { isWin });
                }
                EventBus.emit(EventName.resetBattle, isWin);
            } else {
                let isWin = false;
                if (nextStage) {
                    const tbl = GTable.getList("StageMapTbl").find((t) => t.mapIndex === afk.mapIndex);
                    const stageTbl = GTable.getList("StageTbl").find(
                        (t) =>
                            t.mapIndex === afk.mapIndex &&
                            t.stageIndex[0] <= afk.stageIndex &&
                            t.stageIndex[1] >= afk.stageIndex
                    );
                    const lv = afk.stageIndex + tbl.baseLv + stageTbl.baseLv;
                    isWin = await GWindow.get(WindowBattleScene).nextStage(afk.getWaveId(), lv, -1);
                } else {
                    GWindow.get(WindowBattleScene).clearBattle();
                    const processor = GModel.battle.createStageBattle();
                    isWin = await GWindow.get(WindowBattleScene).battle(processor);
                }
                GApi.stage.reportStageBattleEnd();
                EventBus.emit(EventName.resetBattle, isWin);
            }
        } else {
            GTip.showTip([GLang.code.ui.notformated]);
        }
    }

    /** 更换挂机地图 */
    async changeAfkMap(mapIndex: number): Promise<void> {
        const tbl = GTable.getList("StageMapTbl").find((t) => t.mapIndex === mapIndex);
        const preStageTbl = GTable.getList("StageMapTbl").find((t) => t.mapIndex === tbl.unlock[0]);
        if (this.getStageAfkMap() === mapIndex) return;
        if (this.getStageByMapIndex(mapIndex - 1).stageIndex < tbl.unlock[1]) {
            GTip.showTip([GLang.code.ui.map_condition, preStageTbl.name, "_rs" + tbl.unlock[1]]);
            return;
        }
        await GApi.stage.changeAfkMap({ mapIndex });
        EventBus.emit(EventName.resetBattle);
    }

    /** 购买声望商店商品 */
    buyReputationShopItem(id: number, count: number): Promise<Item[]> {
        return GApi.stage.buyReputationShopItem({ id, count });
    }

    /** 获取关卡成就任务奖励 */
    obtainAchievementReward(id: number): Promise<Item[]> {
        return GApi.stage.obtainAchievementReward({ id });
    }

    /** 获取所有关卡数据 */
    getAllStage(): MainStage[] {
        return GTable.getList("StageMapTbl").map((t) => {
            return this.getStageByMapIndex(t.mapIndex);
        });
    }

    /** 获取指定关卡数据 */
    getStageByMapIndex(mapIndex: number): MainStage {
        return GState.data.stage[mapIndex] || MainStage.empty(mapIndex);
    }

    /** 主线关卡当前挂机地图 */
    getStageAfkMap(): number {
        return GState.data.stageAfkMap;
    }

    /** 地图当前产出库存 */
    getStageAfkMapProduce(): { [mapIndex: number]: Item } {
        const res: { [mapIndex: number]: Item } = {};
        Object.keys(GState.data.stageAfkMapProduce).forEach((k) => {
            const mapIndex = Number(k);
            const s = this.getStageByMapIndex(mapIndex);
            res[mapIndex] = new Item(s.produceId(), GState.data.stageAfkMapProduce[k]);
        });
        return res;
    }

    /** 主线关卡当前挂机宝箱产出 */
    getStageAfkBattleReward(): AfkData {
        return GState.data.stageAfkBattleReward;
    }

    /**
     * 获取成就任务状态
     * uncompleted: 未完成
     * completed: 已完成未领取
     * hasGet: 已领取
     * */
    getStageAchievementMission(id: number): "uncompleted" | "completed" | "hasGet" {
        const tbl = GTable.getById("StageAchievementTbl", id);
        const stage = this.getStageByMapIndex(tbl.stage[0]);
        if (stage.stageIndex < tbl.stage[1]) return "uncompleted";
        if (GState.data.stageAchievementRewardHasGet.includes(id)) return "hasGet";
        return "completed";
    }

    /** 获取商店物品库存 */
    getShopItemRemainStorage(id: number): { maxStorage: number; hasUse: number } {
        const hasUse = GState.data.stageShopHasBuy[id] || 0;
        const tbl = GTable.getById("StageReputationShopTbl", id);
        return { maxStorage: tbl.storage, hasUse: hasUse };
    }

    /** 是否显示关卡的红点 */
    isShowRedDot(): boolean {
        const stageList = this.getAllStage();
        return (
            stageList
                .filter((s) => s.stageIndex > 0)
                .some((s) => {
                    const count = s.produce().count;
                    return (GState.data.stageAfkMapProduce[s.mapIndex] || 0) / count >= 30;
                }) || this.getStageAfkBattleReward().getAfkTime() >= 1800000
        );
    }
    /**是否通关该关卡 */
    isStagePass(mapIndex: number, stageIndex: number): boolean {
        return this.getStageByMapIndex(mapIndex).stageIndex > stageIndex;
    }

    /** 获取现在的关卡 */
    getCurrentStage(): MainStage {
        const afk = this.getStageAfkMap();
        const stage = GState.data.stage[afk];
        return stage;
    }
}
