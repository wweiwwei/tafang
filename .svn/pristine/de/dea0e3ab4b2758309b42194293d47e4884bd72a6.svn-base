import { BattleUtils } from "../Utils/BattleUtils";

export class BattleMapInfo {
    private tbl: BattleSceneInfoTbl;

    constructor(public mapName: string) {
        this.tbl = GTable.getList("BattleSceneInfoTbl").find((t) => t.prefab === mapName);
        if (this.tbl.road[0] === 1) {
            this.mapLength = this.calculateEllipseCircumference(this.tbl.road[1], this.tbl.road[2]);
        } else if (this.tbl.road[0] === 2) {
            this.mapLength = (this.tbl.road[1] + this.tbl.road[2]) * 2;
        }
        this.monsterInitPos = this.getPointByMapPos(this.tbl.monsterBegin).pos;
    }
    private mapLength = 0;
    private monsterInitPos: { x: number; y: number };

    getPlayerPos(): { x: number; y: number } {
        const [x, y] = this.tbl.playerPos;
        return { x, y };
    }

    getInitProgress() {
        return this.tbl.monsterBegin;
    }

    getMonsterInitPos() {
        return this.monsterInitPos;
    }

    getMapLength() {
        return this.mapLength;
    }

    private calculateEllipseCircumference(a: number, b: number): number {
        const pi: number = Math.PI;
        const circumference: number = pi * b + 2 * (a - b);
        return circumference;
    }
    private static PI2 = Math.PI * 2;
    getPointByMapPos(p: number): {
        pos: { x: number; y: number };
        direction: { x: number; y: number };
    } {
        const [kind, width, height, ox, oy] = this.tbl.road;
        if (kind === 1) {
            // 椭圆
            const angle = Math.PI * 2 * p;
            const x = ox + 300 * Math.cos(angle);
            const y = oy + 258 * Math.sin(angle);
            const pos = { x, y };
            let direction: { x: number; y: number };
            const remain = angle % BattleMapInfo.PI2;
            if (remain > Math.PI) {
                // 向右
                direction = {
                    x: 1,
                    y: 0,
                };
            } else {
                // 向左
                direction = {
                    x: -1,
                    y: 0,
                };
            }
            return {
                pos,
                direction,
            };
        } else if (kind === 2) {
            // todo 矩形
        }
    }
}
