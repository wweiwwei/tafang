import { autowired, registerClass } from "../../../framework/Decorator";
import { WindowOpenAnimationEnum, WindowOpenOption } from "../../../framework/ui/GWindow";
import UIButton from "../../../framework/ui/UIButton";
import UIImage from "../../../framework/ui/UIImage";
import UILabel from "../../../framework/ui/UILabel";
import UIList from "../../../framework/ui/UIList";
import UIScrollList from "../../../framework/ui/UIScrollList";
import UIWindow from "../../../framework/ui/UIWindow";
import ListItemItem from "../common/ListItemItem";
import ListItemItem2 from "../common/ListItemItem2";

const { ccclass, property } = cc._decorator;
@registerClass("WindowKnapsack2")
@ccclass
export default class WindowKnapsack2 extends UIWindow {
    static defaultOpentOption: Partial<WindowOpenOption> = {
        animation: WindowOpenAnimationEnum.default,
    };
    _windowParam: any;
    _returnValue: any;

    @autowired(UIButton) closeBtn: UIButton = null;

    /**法宝按钮 */
    @autowired(UIButton) props: UIButton = null;
    /**祝福按钮 */
    @autowired(UIButton) equipments: UIButton = null;
    /**菜单按钮提示1 */
    @autowired(UIImage) menuTips1: UIImage = null;
    /**菜单按钮提示2 */
    @autowired(UIImage) menuTips2: UIImage = null;

    /**选择的物品 */
    @autowired(UIList) switchGoods: UIList<ListItemItem2> = null;
    /**物品名称 */
    @autowired(UILabel) goodsName: UILabel = null;
    /**物品描述 */
    @autowired(UILabel) goodsText: UILabel = null;
    /**信息描述 */
    @autowired(UILabel) infoLab: UILabel = null;
    /**信息节点 */
    @autowired(UIList) infoList: UIList<ListItemItem2> = null;
    /**节点 */
    @autowired(UIScrollList) itemsContainer: UIScrollList<ListItemItem2> = null;
    /**中间提示 */
    @autowired(UILabel) tip: UILabel = null;

    private menuIndex: number = 0;
    private touchId: number = 0;

    protected onInited(): void {
        this.even();
        this.refBtnTips();
        this.refUi();
    }

    refBtnTips() {
        this.menuTips1.node.active = false;
        this.menuTips2.node.active = false;
    }

    async refUi() {
        this.props.text.node.color = this.menuIndex == 0 ? GConstant.menuColor[0] : GConstant.menuColor[1];
        this.equipments.text.node.color = this.menuIndex == 1 ? GConstant.menuColor[0] : GConstant.menuColor[1];
        this.props.bg.imgName = this.menuIndex == 0 ? "common_menubg1" : "common_menubg2";
        this.equipments.bg.imgName = this.menuIndex == 1 ? "common_menubg1" : "common_menubg2";

        this.switchGoods.setState([]);

        this.goodsName.setText();
        this.goodsText.setText();
        this.infoLab.setText();
        this.infoList.setState([]);

        let item = [];
        const api = GBattleApiManager.getBattleStageApi(0);
        let cb = (id) => {
            if (this.touchId == id) {
                this.touchId = 0;
            } else this.touchId = id;
            this.refUi();
        };
        if (api) {
            // 获取战斗背包库存
            if (this.menuIndex == 0) {
                let data = api.rogueEquipmentManager().getAllStorage();
                // console.log("data =", data);
                item = data.map((d) => {
                    let tbl = GTable.getById("RogueEquipmentTbl", d.uid);
                    let image = tbl.img;
                    let bg = GConstant.itemQualityBg[tbl.quality];
                    return { id: d.id, cb: cb, image: image, bg: bg, selected: d.id == this.touchId };
                });
            }
            // 获取战斗祝福列表
            else if (this.menuIndex == 1) {
                let data = api.rogueBlessManager().getAllBless();

                item = data.map((d) => {
                    let image = GTable.getById("RogueBlessTbl", d).img;
                    let bg = "battle_bless_bg";
                    return { id: d, cb: cb, image: image, bg: bg, selected: d == this.touchId };
                });
            }
        }
        this.itemsContainer.setState(item);
    }

    even() {
        this.closeBtn.onClick = () => {
            this.close();
        };
        this.props.onClick = () => {
            this.touchId = 0;
            this.menuIndex = 0;
            this.refUi();
        };
        this.equipments.onClick = () => {
            this.touchId = 0;
            this.menuIndex = 1;
            this.refUi();
        };
    }
}
