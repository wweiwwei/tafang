// Generated from java-escape by ANTLR 4.11.1
// jshint ignore: start
import antlr4 from 'antlr4';
import LogicBindDSLVisitor from './LogicBindDSLVisitor.js';

const serializedATN = [4,1,48,230,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,1,0,1,0,1,0,5,0,18,8,0,10,0,12,0,21,9,0,1,0,3,0,24,8,0,
1,1,1,1,1,1,1,1,5,1,30,8,1,10,1,12,1,33,9,1,1,1,3,1,36,8,1,1,1,1,1,1,2,1,
2,1,2,3,2,43,8,2,1,3,1,3,1,3,3,3,48,8,3,1,3,1,3,1,3,1,3,5,3,54,8,3,10,3,
12,3,57,9,3,3,3,59,8,3,1,3,1,3,3,3,63,8,3,1,3,1,3,1,3,3,3,68,8,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,84,8,3,1,3,3,3,87,8,
3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,115,8,3,10,3,12,3,118,9,3,3,3,120,
8,3,1,3,1,3,1,3,1,3,1,3,5,3,127,8,3,10,3,12,3,130,9,3,3,3,132,8,3,1,3,3,
3,135,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,185,8,3,1,
3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,194,8,3,1,3,1,3,1,3,1,3,3,3,200,8,3,1,3,1,
3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,211,8,3,10,3,12,3,214,9,3,1,4,1,4,1,4,
5,4,219,8,4,10,4,12,4,222,9,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,0,1,6,7,0,2,4,
6,8,10,12,0,6,1,0,15,17,2,0,13,13,18,18,1,0,19,22,1,0,23,26,1,0,27,29,1,
0,43,45,276,0,14,1,0,0,0,2,25,1,0,0,0,4,39,1,0,0,0,6,134,1,0,0,0,8,215,1,
0,0,0,10,223,1,0,0,0,12,227,1,0,0,0,14,19,3,6,3,0,15,16,5,1,0,0,16,18,3,
6,3,0,17,15,1,0,0,0,18,21,1,0,0,0,19,17,1,0,0,0,19,20,1,0,0,0,20,23,1,0,
0,0,21,19,1,0,0,0,22,24,5,1,0,0,23,22,1,0,0,0,23,24,1,0,0,0,24,1,1,0,0,0,
25,26,5,2,0,0,26,31,3,6,3,0,27,28,5,1,0,0,28,30,3,6,3,0,29,27,1,0,0,0,30,
33,1,0,0,0,31,29,1,0,0,0,31,32,1,0,0,0,32,35,1,0,0,0,33,31,1,0,0,0,34,36,
5,1,0,0,35,34,1,0,0,0,35,36,1,0,0,0,36,37,1,0,0,0,37,38,5,3,0,0,38,3,1,0,
0,0,39,42,5,4,0,0,40,43,3,2,1,0,41,43,3,6,3,0,42,40,1,0,0,0,42,41,1,0,0,
0,43,5,1,0,0,0,44,45,6,3,-1,0,45,47,5,5,0,0,46,48,3,6,3,0,47,46,1,0,0,0,
47,48,1,0,0,0,48,135,1,0,0,0,49,58,5,6,0,0,50,55,5,43,0,0,51,52,5,7,0,0,
52,54,5,43,0,0,53,51,1,0,0,0,54,57,1,0,0,0,55,53,1,0,0,0,55,56,1,0,0,0,56,
59,1,0,0,0,57,55,1,0,0,0,58,50,1,0,0,0,58,59,1,0,0,0,59,60,1,0,0,0,60,63,
5,8,0,0,61,63,5,43,0,0,62,49,1,0,0,0,62,61,1,0,0,0,63,64,1,0,0,0,64,67,5,
9,0,0,65,68,3,2,1,0,66,68,3,6,3,0,67,65,1,0,0,0,67,66,1,0,0,0,68,135,1,0,
0,0,69,70,5,6,0,0,70,71,3,6,3,0,71,72,5,8,0,0,72,135,1,0,0,0,73,74,5,13,
0,0,74,135,3,6,3,27,75,76,5,30,0,0,76,135,3,6,3,20,77,78,5,33,0,0,78,79,
5,6,0,0,79,80,3,6,3,0,80,83,5,8,0,0,81,84,3,2,1,0,82,84,3,6,3,0,83,81,1,
0,0,0,83,82,1,0,0,0,84,86,1,0,0,0,85,87,3,4,2,0,86,85,1,0,0,0,86,87,1,0,
0,0,87,135,1,0,0,0,88,89,5,34,0,0,89,90,5,6,0,0,90,91,3,6,3,0,91,92,5,8,
0,0,92,93,3,2,1,0,93,135,1,0,0,0,94,95,5,37,0,0,95,135,5,43,0,0,96,97,5,
37,0,0,97,98,5,43,0,0,98,99,5,38,0,0,99,135,3,6,3,13,100,101,5,43,0,0,101,
102,5,38,0,0,102,135,3,6,3,12,103,135,5,39,0,0,104,135,5,40,0,0,105,135,
5,41,0,0,106,135,5,42,0,0,107,135,5,43,0,0,108,135,5,45,0,0,109,135,5,44,
0,0,110,119,5,10,0,0,111,116,3,6,3,0,112,113,5,7,0,0,113,115,3,6,3,0,114,
112,1,0,0,0,115,118,1,0,0,0,116,114,1,0,0,0,116,117,1,0,0,0,117,120,1,0,
0,0,118,116,1,0,0,0,119,111,1,0,0,0,119,120,1,0,0,0,120,121,1,0,0,0,121,
135,5,11,0,0,122,131,5,2,0,0,123,128,3,10,5,0,124,125,5,7,0,0,125,127,3,
10,5,0,126,124,1,0,0,0,127,130,1,0,0,0,128,126,1,0,0,0,128,129,1,0,0,0,129,
132,1,0,0,0,130,128,1,0,0,0,131,123,1,0,0,0,131,132,1,0,0,0,132,133,1,0,
0,0,133,135,5,3,0,0,134,44,1,0,0,0,134,62,1,0,0,0,134,69,1,0,0,0,134,73,
1,0,0,0,134,75,1,0,0,0,134,77,1,0,0,0,134,88,1,0,0,0,134,94,1,0,0,0,134,
96,1,0,0,0,134,100,1,0,0,0,134,103,1,0,0,0,134,104,1,0,0,0,134,105,1,0,0,
0,134,106,1,0,0,0,134,107,1,0,0,0,134,108,1,0,0,0,134,109,1,0,0,0,134,110,
1,0,0,0,134,122,1,0,0,0,135,212,1,0,0,0,136,137,10,26,0,0,137,138,5,14,0,
0,138,211,3,6,3,27,139,140,10,25,0,0,140,141,7,0,0,0,141,211,3,6,3,26,142,
143,10,24,0,0,143,144,7,1,0,0,144,211,3,6,3,25,145,146,10,23,0,0,146,147,
7,2,0,0,147,211,3,6,3,24,148,149,10,22,0,0,149,150,7,3,0,0,150,211,3,6,3,
23,151,152,10,21,0,0,152,153,7,4,0,0,153,211,3,6,3,22,154,155,10,19,0,0,
155,156,5,31,0,0,156,211,3,6,3,20,157,158,10,18,0,0,158,159,5,32,0,0,159,
211,3,6,3,19,160,161,10,15,0,0,161,162,5,35,0,0,162,163,3,6,3,0,163,164,
5,36,0,0,164,165,3,6,3,16,165,211,1,0,0,0,166,167,10,11,0,0,167,168,5,12,
0,0,168,169,5,43,0,0,169,170,5,38,0,0,170,211,3,6,3,12,171,172,10,10,0,0,
172,173,5,10,0,0,173,174,3,6,3,0,174,175,5,11,0,0,175,176,5,38,0,0,176,177,
3,6,3,11,177,211,1,0,0,0,178,179,10,32,0,0,179,180,5,10,0,0,180,181,3,6,
3,0,181,182,5,11,0,0,182,184,5,6,0,0,183,185,3,8,4,0,184,183,1,0,0,0,184,
185,1,0,0,0,185,186,1,0,0,0,186,187,5,8,0,0,187,211,1,0,0,0,188,189,10,31,
0,0,189,190,5,12,0,0,190,191,5,43,0,0,191,193,5,6,0,0,192,194,3,8,4,0,193,
192,1,0,0,0,193,194,1,0,0,0,194,195,1,0,0,0,195,211,5,8,0,0,196,197,10,30,
0,0,197,199,5,6,0,0,198,200,3,8,4,0,199,198,1,0,0,0,199,200,1,0,0,0,200,
201,1,0,0,0,201,211,5,8,0,0,202,203,10,29,0,0,203,204,5,10,0,0,204,205,3,
6,3,0,205,206,5,11,0,0,206,211,1,0,0,0,207,208,10,28,0,0,208,209,5,12,0,
0,209,211,5,43,0,0,210,136,1,0,0,0,210,139,1,0,0,0,210,142,1,0,0,0,210,145,
1,0,0,0,210,148,1,0,0,0,210,151,1,0,0,0,210,154,1,0,0,0,210,157,1,0,0,0,
210,160,1,0,0,0,210,166,1,0,0,0,210,171,1,0,0,0,210,178,1,0,0,0,210,188,
1,0,0,0,210,196,1,0,0,0,210,202,1,0,0,0,210,207,1,0,0,0,211,214,1,0,0,0,
212,210,1,0,0,0,212,213,1,0,0,0,213,7,1,0,0,0,214,212,1,0,0,0,215,220,3,
6,3,0,216,217,5,7,0,0,217,219,3,6,3,0,218,216,1,0,0,0,219,222,1,0,0,0,220,
218,1,0,0,0,220,221,1,0,0,0,221,9,1,0,0,0,222,220,1,0,0,0,223,224,3,12,6,
0,224,225,5,36,0,0,225,226,3,6,3,0,226,11,1,0,0,0,227,228,7,5,0,0,228,13,
1,0,0,0,23,19,23,31,35,42,47,55,58,62,67,83,86,116,119,128,131,134,184,193,
199,210,212,220];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class LogicBindDSLParser extends antlr4.Parser {

    static grammarFileName = "java-escape";
    static literalNames = [ null, "';'", "'{'", "'}'", "'else'", "'return'", 
                            "'('", "','", "')'", "'=>'", "'['", "']'", "'.'", 
                            "'-'", "'**'", "'*'", "'/'", "'%'", "'+'", "'>'", 
                            "'>='", "'<'", "'<='", "'=='", "'!='", "'==='", 
                            "'!=='", "'&'", "'^'", "'|'", "'!'", "'&&'", 
                            "'||'", "'if'", "'while'", "'?'", "':'", "'let'", 
                            "'='", "'true'", "'false'", "'null'", "'undefined'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, "ID", "NUMBER", "STRING", 
                             "WS", "COMMENT", "LINE_COMMENT" ];
    static ruleNames = [ "program", "blockStat", "elsePart", "expr", "exprList", 
                         "propertyAssignment", "propertyName" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = LogicBindDSLParser.ruleNames;
        this.literalNames = LogicBindDSLParser.literalNames;
        this.symbolicNames = LogicBindDSLParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 3:
    	    		return this.expr_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    expr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 26);
    		case 1:
    			return this.precpred(this._ctx, 25);
    		case 2:
    			return this.precpred(this._ctx, 24);
    		case 3:
    			return this.precpred(this._ctx, 23);
    		case 4:
    			return this.precpred(this._ctx, 22);
    		case 5:
    			return this.precpred(this._ctx, 21);
    		case 6:
    			return this.precpred(this._ctx, 19);
    		case 7:
    			return this.precpred(this._ctx, 18);
    		case 8:
    			return this.precpred(this._ctx, 15);
    		case 9:
    			return this.precpred(this._ctx, 11);
    		case 10:
    			return this.precpred(this._ctx, 10);
    		case 11:
    			return this.precpred(this._ctx, 32);
    		case 12:
    			return this.precpred(this._ctx, 31);
    		case 13:
    			return this.precpred(this._ctx, 30);
    		case 14:
    			return this.precpred(this._ctx, 29);
    		case 15:
    			return this.precpred(this._ctx, 28);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	program() {
	    let localctx = new ProgramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, LogicBindDSLParser.RULE_program);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 14;
	        this.expr(0);
	        this.state = 19;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,0,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 15;
	                this.match(LogicBindDSLParser.T__0);
	                this.state = 16;
	                this.expr(0); 
	            }
	            this.state = 21;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,0,this._ctx);
	        }

	        this.state = 23;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===1) {
	            this.state = 22;
	            this.match(LogicBindDSLParser.T__0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockStat() {
	    let localctx = new BlockStatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, LogicBindDSLParser.RULE_blockStat);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 25;
	        this.match(LogicBindDSLParser.T__1);
	        this.state = 26;
	        this.expr(0);
	        this.state = 31;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,2,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 27;
	                this.match(LogicBindDSLParser.T__0);
	                this.state = 28;
	                this.expr(0); 
	            }
	            this.state = 33;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,2,this._ctx);
	        }

	        this.state = 35;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===1) {
	            this.state = 34;
	            this.match(LogicBindDSLParser.T__0);
	        }

	        this.state = 37;
	        this.match(LogicBindDSLParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elsePart() {
	    let localctx = new ElsePartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, LogicBindDSLParser.RULE_elsePart);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 39;
	        this.match(LogicBindDSLParser.T__3);
	        this.state = 42;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 40;
	            this.blockStat();
	            break;

	        case 2:
	            this.state = 41;
	            this.expr(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 6;
	    this.enterRecursionRule(localctx, 6, LogicBindDSLParser.RULE_expr, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 134;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ReturnStatContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 45;
	            this.match(LogicBindDSLParser.T__4);
	            this.state = 47;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	            if(la_===1) {
	                this.state = 46;
	                this.expr(0);

	            }
	            break;

	        case 2:
	            localctx = new ArrowFunctionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 62;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 6:
	                this.state = 49;
	                this.match(LogicBindDSLParser.T__5);
	                this.state = 58;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===43) {
	                    this.state = 50;
	                    this.match(LogicBindDSLParser.ID);
	                    this.state = 55;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===7) {
	                        this.state = 51;
	                        this.match(LogicBindDSLParser.T__6);
	                        this.state = 52;
	                        this.match(LogicBindDSLParser.ID);
	                        this.state = 57;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                }

	                this.state = 60;
	                this.match(LogicBindDSLParser.T__7);
	                break;
	            case 43:
	                this.state = 61;
	                this.match(LogicBindDSLParser.ID);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 64;
	            this.match(LogicBindDSLParser.T__8);
	            this.state = 67;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 65;
	                this.blockStat();
	                break;

	            case 2:
	                this.state = 66;
	                this.expr(0);
	                break;

	            }
	            break;

	        case 3:
	            localctx = new ParenthesesExprContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 69;
	            this.match(LogicBindDSLParser.T__5);
	            this.state = 70;
	            this.expr(0);
	            this.state = 71;
	            this.match(LogicBindDSLParser.T__7);
	            break;

	        case 4:
	            localctx = new UnaryNegativeContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 73;
	            this.match(LogicBindDSLParser.T__12);
	            this.state = 74;
	            this.expr(27);
	            break;

	        case 5:
	            localctx = new BooleanNotContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 75;
	            this.match(LogicBindDSLParser.T__29);
	            this.state = 76;
	            this.expr(20);
	            break;

	        case 6:
	            localctx = new IfExprContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 77;
	            this.match(LogicBindDSLParser.T__32);
	            this.state = 78;
	            this.match(LogicBindDSLParser.T__5);
	            this.state = 79;
	            this.expr(0);
	            this.state = 80;
	            this.match(LogicBindDSLParser.T__7);
	            this.state = 83;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 81;
	                this.blockStat();
	                break;

	            case 2:
	                this.state = 82;
	                this.expr(0);
	                break;

	            }
	            this.state = 86;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	            if(la_===1) {
	                this.state = 85;
	                this.elsePart();

	            }
	            break;

	        case 7:
	            localctx = new WhileExprContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 88;
	            this.match(LogicBindDSLParser.T__33);
	            this.state = 89;
	            this.match(LogicBindDSLParser.T__5);
	            this.state = 90;
	            this.expr(0);
	            this.state = 91;
	            this.match(LogicBindDSLParser.T__7);
	            this.state = 92;
	            this.blockStat();
	            break;

	        case 8:
	            localctx = new VariableDeclareContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 94;
	            this.match(LogicBindDSLParser.T__36);
	            this.state = 95;
	            this.match(LogicBindDSLParser.ID);
	            break;

	        case 9:
	            localctx = new VariableDeclareAndAssignContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 96;
	            this.match(LogicBindDSLParser.T__36);
	            this.state = 97;
	            this.match(LogicBindDSLParser.ID);
	            this.state = 98;
	            this.match(LogicBindDSLParser.T__37);
	            this.state = 99;
	            this.expr(13);
	            break;

	        case 10:
	            localctx = new VariableAssignContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 100;
	            this.match(LogicBindDSLParser.ID);
	            this.state = 101;
	            this.match(LogicBindDSLParser.T__37);
	            this.state = 102;
	            this.expr(12);
	            break;

	        case 11:
	            localctx = new TrueLiteralContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 103;
	            this.match(LogicBindDSLParser.T__38);
	            break;

	        case 12:
	            localctx = new FalseLiteralContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 104;
	            this.match(LogicBindDSLParser.T__39);
	            break;

	        case 13:
	            localctx = new NullLiteralContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 105;
	            this.match(LogicBindDSLParser.T__40);
	            break;

	        case 14:
	            localctx = new UndefinedContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 106;
	            this.match(LogicBindDSLParser.T__41);
	            break;

	        case 15:
	            localctx = new IdentifierContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 107;
	            this.match(LogicBindDSLParser.ID);
	            break;

	        case 16:
	            localctx = new StringLiteralContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 108;
	            this.match(LogicBindDSLParser.STRING);
	            break;

	        case 17:
	            localctx = new NumberLiteralContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 109;
	            this.match(LogicBindDSLParser.NUMBER);
	            break;

	        case 18:
	            localctx = new ArrayLiteralContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 110;
	            this.match(LogicBindDSLParser.T__9);
	            this.state = 119;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & 1073751140) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & 8147) !== 0)) {
	                this.state = 111;
	                this.expr(0);
	                this.state = 116;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===7) {
	                    this.state = 112;
	                    this.match(LogicBindDSLParser.T__6);
	                    this.state = 113;
	                    this.expr(0);
	                    this.state = 118;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 121;
	            this.match(LogicBindDSLParser.T__10);
	            break;

	        case 19:
	            localctx = new ObjectLiteralContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 122;
	            this.match(LogicBindDSLParser.T__1);
	            this.state = 131;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & 7) !== 0)) {
	                this.state = 123;
	                this.propertyAssignment();
	                this.state = 128;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===7) {
	                    this.state = 124;
	                    this.match(LogicBindDSLParser.T__6);
	                    this.state = 125;
	                    this.propertyAssignment();
	                    this.state = 130;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 133;
	            this.match(LogicBindDSLParser.T__2);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 212;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 210;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new PowerContext(this, new ExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, LogicBindDSLParser.RULE_expr);
	                    this.state = 136;
	                    if (!( this.precpred(this._ctx, 26))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
	                    }
	                    this.state = 137;
	                    this.match(LogicBindDSLParser.T__13);
	                    this.state = 138;
	                    this.expr(27);
	                    break;

	                case 2:
	                    localctx = new MulDivContext(this, new ExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, LogicBindDSLParser.RULE_expr);
	                    this.state = 139;
	                    if (!( this.precpred(this._ctx, 25))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
	                    }
	                    this.state = 140;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & 229376) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 141;
	                    this.expr(26);
	                    break;

	                case 3:
	                    localctx = new AddSubContext(this, new ExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, LogicBindDSLParser.RULE_expr);
	                    this.state = 142;
	                    if (!( this.precpred(this._ctx, 24))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
	                    }
	                    this.state = 143;
	                    _la = this._input.LA(1);
	                    if(!(_la===13 || _la===18)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 144;
	                    this.expr(25);
	                    break;

	                case 4:
	                    localctx = new CompareContext(this, new ExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, LogicBindDSLParser.RULE_expr);
	                    this.state = 145;
	                    if (!( this.precpred(this._ctx, 23))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
	                    }
	                    this.state = 146;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & 7864320) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 147;
	                    this.expr(24);
	                    break;

	                case 5:
	                    localctx = new EqualContext(this, new ExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, LogicBindDSLParser.RULE_expr);
	                    this.state = 148;
	                    if (!( this.precpred(this._ctx, 22))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
	                    }
	                    this.state = 149;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & 125829120) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 150;
	                    this.expr(23);
	                    break;

	                case 6:
	                    localctx = new BitwiseLogicContext(this, new ExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, LogicBindDSLParser.RULE_expr);
	                    this.state = 151;
	                    if (!( this.precpred(this._ctx, 21))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
	                    }
	                    this.state = 152;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & 939524096) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 153;
	                    this.expr(22);
	                    break;

	                case 7:
	                    localctx = new BooleanOrContext(this, new ExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, LogicBindDSLParser.RULE_expr);
	                    this.state = 154;
	                    if (!( this.precpred(this._ctx, 19))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
	                    }
	                    this.state = 155;
	                    this.match(LogicBindDSLParser.T__30);
	                    this.state = 156;
	                    this.expr(20);
	                    break;

	                case 8:
	                    localctx = new BooleanAndContext(this, new ExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, LogicBindDSLParser.RULE_expr);
	                    this.state = 157;
	                    if (!( this.precpred(this._ctx, 18))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
	                    }
	                    this.state = 158;
	                    this.match(LogicBindDSLParser.T__31);
	                    this.state = 159;
	                    this.expr(19);
	                    break;

	                case 9:
	                    localctx = new TernaryExprContext(this, new ExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, LogicBindDSLParser.RULE_expr);
	                    this.state = 160;
	                    if (!( this.precpred(this._ctx, 15))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
	                    }
	                    this.state = 161;
	                    this.match(LogicBindDSLParser.T__34);
	                    this.state = 162;
	                    this.expr(0);
	                    this.state = 163;
	                    this.match(LogicBindDSLParser.T__35);
	                    this.state = 164;
	                    this.expr(16);
	                    break;

	                case 10:
	                    localctx = new PropertyAssignContext(this, new ExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, LogicBindDSLParser.RULE_expr);
	                    this.state = 166;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 167;
	                    this.match(LogicBindDSLParser.T__11);
	                    this.state = 168;
	                    this.match(LogicBindDSLParser.ID);
	                    this.state = 169;
	                    this.match(LogicBindDSLParser.T__37);
	                    this.state = 170;
	                    this.expr(12);
	                    break;

	                case 11:
	                    localctx = new SquareBracketPropertyAssignContext(this, new ExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, LogicBindDSLParser.RULE_expr);
	                    this.state = 171;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 172;
	                    this.match(LogicBindDSLParser.T__9);
	                    this.state = 173;
	                    this.expr(0);
	                    this.state = 174;
	                    this.match(LogicBindDSLParser.T__10);
	                    this.state = 175;
	                    this.match(LogicBindDSLParser.T__37);
	                    this.state = 176;
	                    this.expr(11);
	                    break;

	                case 12:
	                    localctx = new SquareBracketsMethodCallContext(this, new ExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, LogicBindDSLParser.RULE_expr);
	                    this.state = 178;
	                    if (!( this.precpred(this._ctx, 32))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 32)");
	                    }
	                    this.state = 179;
	                    this.match(LogicBindDSLParser.T__9);
	                    this.state = 180;
	                    this.expr(0);
	                    this.state = 181;
	                    this.match(LogicBindDSLParser.T__10);
	                    this.state = 182;
	                    this.match(LogicBindDSLParser.T__5);
	                    this.state = 184;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & 1073751140) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & 8147) !== 0)) {
	                        this.state = 183;
	                        this.exprList();
	                    }

	                    this.state = 186;
	                    this.match(LogicBindDSLParser.T__7);
	                    break;

	                case 13:
	                    localctx = new MethodCallContext(this, new ExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, LogicBindDSLParser.RULE_expr);
	                    this.state = 188;
	                    if (!( this.precpred(this._ctx, 31))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 31)");
	                    }
	                    this.state = 189;
	                    this.match(LogicBindDSLParser.T__11);
	                    this.state = 190;
	                    this.match(LogicBindDSLParser.ID);
	                    this.state = 191;
	                    this.match(LogicBindDSLParser.T__5);
	                    this.state = 193;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & 1073751140) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & 8147) !== 0)) {
	                        this.state = 192;
	                        this.exprList();
	                    }

	                    this.state = 195;
	                    this.match(LogicBindDSLParser.T__7);
	                    break;

	                case 14:
	                    localctx = new FunctionCallContext(this, new ExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, LogicBindDSLParser.RULE_expr);
	                    this.state = 196;
	                    if (!( this.precpred(this._ctx, 30))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 30)");
	                    }
	                    this.state = 197;
	                    this.match(LogicBindDSLParser.T__5);
	                    this.state = 199;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & 1073751140) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & 8147) !== 0)) {
	                        this.state = 198;
	                        this.exprList();
	                    }

	                    this.state = 201;
	                    this.match(LogicBindDSLParser.T__7);
	                    break;

	                case 15:
	                    localctx = new SquareBracketsAttributeContext(this, new ExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, LogicBindDSLParser.RULE_expr);
	                    this.state = 202;
	                    if (!( this.precpred(this._ctx, 29))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 29)");
	                    }
	                    this.state = 203;
	                    this.match(LogicBindDSLParser.T__9);
	                    this.state = 204;
	                    this.expr(0);
	                    this.state = 205;
	                    this.match(LogicBindDSLParser.T__10);
	                    break;

	                case 16:
	                    localctx = new DotAttributeContext(this, new ExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, LogicBindDSLParser.RULE_expr);
	                    this.state = 207;
	                    if (!( this.precpred(this._ctx, 28))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 28)");
	                    }
	                    this.state = 208;
	                    this.match(LogicBindDSLParser.T__11);
	                    this.state = 209;
	                    this.match(LogicBindDSLParser.ID);
	                    break;

	                } 
	            }
	            this.state = 214;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	exprList() {
	    let localctx = new ExprListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, LogicBindDSLParser.RULE_exprList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 215;
	        this.expr(0);
	        this.state = 220;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===7) {
	            this.state = 216;
	            this.match(LogicBindDSLParser.T__6);
	            this.state = 217;
	            this.expr(0);
	            this.state = 222;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyAssignment() {
	    let localctx = new PropertyAssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, LogicBindDSLParser.RULE_propertyAssignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 223;
	        this.propertyName();
	        this.state = 224;
	        this.match(LogicBindDSLParser.T__35);
	        this.state = 225;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyName() {
	    let localctx = new PropertyNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, LogicBindDSLParser.RULE_propertyName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 227;
	        _la = this._input.LA(1);
	        if(!(((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & 7) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

LogicBindDSLParser.EOF = antlr4.Token.EOF;
LogicBindDSLParser.T__0 = 1;
LogicBindDSLParser.T__1 = 2;
LogicBindDSLParser.T__2 = 3;
LogicBindDSLParser.T__3 = 4;
LogicBindDSLParser.T__4 = 5;
LogicBindDSLParser.T__5 = 6;
LogicBindDSLParser.T__6 = 7;
LogicBindDSLParser.T__7 = 8;
LogicBindDSLParser.T__8 = 9;
LogicBindDSLParser.T__9 = 10;
LogicBindDSLParser.T__10 = 11;
LogicBindDSLParser.T__11 = 12;
LogicBindDSLParser.T__12 = 13;
LogicBindDSLParser.T__13 = 14;
LogicBindDSLParser.T__14 = 15;
LogicBindDSLParser.T__15 = 16;
LogicBindDSLParser.T__16 = 17;
LogicBindDSLParser.T__17 = 18;
LogicBindDSLParser.T__18 = 19;
LogicBindDSLParser.T__19 = 20;
LogicBindDSLParser.T__20 = 21;
LogicBindDSLParser.T__21 = 22;
LogicBindDSLParser.T__22 = 23;
LogicBindDSLParser.T__23 = 24;
LogicBindDSLParser.T__24 = 25;
LogicBindDSLParser.T__25 = 26;
LogicBindDSLParser.T__26 = 27;
LogicBindDSLParser.T__27 = 28;
LogicBindDSLParser.T__28 = 29;
LogicBindDSLParser.T__29 = 30;
LogicBindDSLParser.T__30 = 31;
LogicBindDSLParser.T__31 = 32;
LogicBindDSLParser.T__32 = 33;
LogicBindDSLParser.T__33 = 34;
LogicBindDSLParser.T__34 = 35;
LogicBindDSLParser.T__35 = 36;
LogicBindDSLParser.T__36 = 37;
LogicBindDSLParser.T__37 = 38;
LogicBindDSLParser.T__38 = 39;
LogicBindDSLParser.T__39 = 40;
LogicBindDSLParser.T__40 = 41;
LogicBindDSLParser.T__41 = 42;
LogicBindDSLParser.ID = 43;
LogicBindDSLParser.NUMBER = 44;
LogicBindDSLParser.STRING = 45;
LogicBindDSLParser.WS = 46;
LogicBindDSLParser.COMMENT = 47;
LogicBindDSLParser.LINE_COMMENT = 48;

LogicBindDSLParser.RULE_program = 0;
LogicBindDSLParser.RULE_blockStat = 1;
LogicBindDSLParser.RULE_elsePart = 2;
LogicBindDSLParser.RULE_expr = 3;
LogicBindDSLParser.RULE_exprList = 4;
LogicBindDSLParser.RULE_propertyAssignment = 5;
LogicBindDSLParser.RULE_propertyName = 6;

class ProgramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LogicBindDSLParser.RULE_program;
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitProgram(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BlockStatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LogicBindDSLParser.RULE_blockStat;
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitBlockStat(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElsePartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LogicBindDSLParser.RULE_elsePart;
    }

	blockStat() {
	    return this.getTypedRuleContext(BlockStatContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitElsePart(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LogicBindDSLParser.RULE_expr;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CompareContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitCompare(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.CompareContext = CompareContext;

class SquareBracketPropertyAssignContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitSquareBracketPropertyAssign(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.SquareBracketPropertyAssignContext = SquareBracketPropertyAssignContext;

class BitwiseLogicContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitBitwiseLogic(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.BitwiseLogicContext = BitwiseLogicContext;

class ArrayLiteralContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitArrayLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.ArrayLiteralContext = ArrayLiteralContext;

class TrueLiteralContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }


	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitTrueLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.TrueLiteralContext = TrueLiteralContext;

class ParenthesesExprContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitParenthesesExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.ParenthesesExprContext = ParenthesesExprContext;

class VariableDeclareContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ID() {
	    return this.getToken(LogicBindDSLParser.ID, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitVariableDeclare(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.VariableDeclareContext = VariableDeclareContext;

class MulDivContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitMulDiv(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.MulDivContext = MulDivContext;

class UndefinedContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }


	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitUndefined(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.UndefinedContext = UndefinedContext;

class VariableDeclareAndAssignContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ID() {
	    return this.getToken(LogicBindDSLParser.ID, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitVariableDeclareAndAssign(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.VariableDeclareAndAssignContext = VariableDeclareAndAssignContext;

class VariableAssignContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ID() {
	    return this.getToken(LogicBindDSLParser.ID, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitVariableAssign(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.VariableAssignContext = VariableAssignContext;

class FalseLiteralContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }


	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitFalseLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.FalseLiteralContext = FalseLiteralContext;

class TernaryExprContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitTernaryExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.TernaryExprContext = TernaryExprContext;

class ReturnStatContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitReturnStat(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.ReturnStatContext = ReturnStatContext;

class IfExprContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	blockStat() {
	    return this.getTypedRuleContext(BlockStatContext,0);
	};

	elsePart() {
	    return this.getTypedRuleContext(ElsePartContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitIfExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.IfExprContext = IfExprContext;

class BooleanOrContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitBooleanOr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.BooleanOrContext = BooleanOrContext;

class PowerContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitPower(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.PowerContext = PowerContext;

class PropertyAssignContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	ID() {
	    return this.getToken(LogicBindDSLParser.ID, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitPropertyAssign(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.PropertyAssignContext = PropertyAssignContext;

class DotAttributeContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	ID() {
	    return this.getToken(LogicBindDSLParser.ID, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitDotAttribute(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.DotAttributeContext = DotAttributeContext;

class SquareBracketsMethodCallContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	exprList() {
	    return this.getTypedRuleContext(ExprListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitSquareBracketsMethodCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.SquareBracketsMethodCallContext = SquareBracketsMethodCallContext;

class IdentifierContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ID() {
	    return this.getToken(LogicBindDSLParser.ID, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.IdentifierContext = IdentifierContext;

class NullLiteralContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }


	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitNullLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.NullLiteralContext = NullLiteralContext;

class ObjectLiteralContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	propertyAssignment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyAssignmentContext);
	    } else {
	        return this.getTypedRuleContext(PropertyAssignmentContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitObjectLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.ObjectLiteralContext = ObjectLiteralContext;

class SquareBracketsAttributeContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitSquareBracketsAttribute(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.SquareBracketsAttributeContext = SquareBracketsAttributeContext;

class UnaryNegativeContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitUnaryNegative(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.UnaryNegativeContext = UnaryNegativeContext;

class AddSubContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitAddSub(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.AddSubContext = AddSubContext;

class ArrowFunctionContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ID = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(LogicBindDSLParser.ID);
	    } else {
	        return this.getToken(LogicBindDSLParser.ID, i);
	    }
	};


	blockStat() {
	    return this.getTypedRuleContext(BlockStatContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitArrowFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.ArrowFunctionContext = ArrowFunctionContext;

class EqualContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitEqual(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.EqualContext = EqualContext;

class WhileExprContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	blockStat() {
	    return this.getTypedRuleContext(BlockStatContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitWhileExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.WhileExprContext = WhileExprContext;

class StringLiteralContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	STRING() {
	    return this.getToken(LogicBindDSLParser.STRING, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitStringLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.StringLiteralContext = StringLiteralContext;

class FunctionCallContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	exprList() {
	    return this.getTypedRuleContext(ExprListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitFunctionCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.FunctionCallContext = FunctionCallContext;

class BooleanNotContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitBooleanNot(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.BooleanNotContext = BooleanNotContext;

class NumberLiteralContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NUMBER() {
	    return this.getToken(LogicBindDSLParser.NUMBER, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitNumberLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.NumberLiteralContext = NumberLiteralContext;

class BooleanAndContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitBooleanAnd(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.BooleanAndContext = BooleanAndContext;

class MethodCallContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	ID() {
	    return this.getToken(LogicBindDSLParser.ID, 0);
	};

	exprList() {
	    return this.getTypedRuleContext(ExprListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitMethodCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

LogicBindDSLParser.MethodCallContext = MethodCallContext;

class ExprListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LogicBindDSLParser.RULE_exprList;
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitExprList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropertyAssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LogicBindDSLParser.RULE_propertyAssignment;
    }

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitPropertyAssignment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropertyNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = LogicBindDSLParser.RULE_propertyName;
    }

	ID() {
	    return this.getToken(LogicBindDSLParser.ID, 0);
	};

	STRING() {
	    return this.getToken(LogicBindDSLParser.STRING, 0);
	};

	NUMBER() {
	    return this.getToken(LogicBindDSLParser.NUMBER, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof LogicBindDSLVisitor ) {
	        return visitor.visitPropertyName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




LogicBindDSLParser.ProgramContext = ProgramContext; 
LogicBindDSLParser.BlockStatContext = BlockStatContext; 
LogicBindDSLParser.ElsePartContext = ElsePartContext; 
LogicBindDSLParser.ExprContext = ExprContext; 
LogicBindDSLParser.ExprListContext = ExprListContext; 
LogicBindDSLParser.PropertyAssignmentContext = PropertyAssignmentContext; 
LogicBindDSLParser.PropertyNameContext = PropertyNameContext; 
